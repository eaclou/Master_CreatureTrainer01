//Boris Novikov (17.09.2013)
//Special thanks to Johannes Gotlén for geometry shader example.

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Poly
{
    float3 A;
    float3 B;
    float3 C;
    float3 NA;
    float3 NB;
    float3 NC;
};

struct SegmentTransform
{
    float3 P;
    float4 R;
    float3 S;
};

int _CalcNumPolys = 1;

float _GlobalOffsetX = 0;
float _GlobalOffsetY = 0;
float _GlobalOffsetZ = 0;

RWStructuredBuffer<SegmentTransform> segmentTransformBuffer;

//output triangle stream (special thanks to Scrawk from Unity3d forums)
// Somehow works by seamlessly converting 3 floats from .cs into a float3 vector here inside shader
RWStructuredBuffer<Poly> buffer;

// Holds numPolys
RWStructuredBuffer<int> numPolyBuffer;

//Counter is used to prevent multi-threaded function from writing to the same adresses
groupshared int index_counter = 0;
groupshared int index_numPolys = 0;

float3 RotatePoint(float3 position, float4 rotation) {
	float3 t = 2 * cross(rotation.xyz, position);
	return (position + rotation.w * t + cross(rotation.xyz, t));
}

float DistancePointToBox(float3 pos, float3 boxPos, float3 boxScale, float4 boxRotation) {

    float3 boxCenterToPoint = pos - boxPos;
    float3 right = RotatePoint(float3(1, 0, 0), boxRotation);
    float3 up = RotatePoint(float3(0, 1, 0), boxRotation);
    float3 forward = RotatePoint(float3(0, 0, 1), boxRotation);

    float dotRight = abs(dot(right, boxCenterToPoint));
    float dotUp = abs(dot(up, boxCenterToPoint));
    float dotForward = abs(dot(forward, boxCenterToPoint));

    float distRight = boxScale.x - dotRight;
    float distUp = boxScale.y - dotUp;
    float distForward = boxScale.z - dotForward;

    return saturate(min(min(distRight, distUp), distForward));
}

float SampleDensity(float3 pPosition){
	
	//return simplex3d(pPosition);	
	//float density = ((pPosition.y - 2) * -1 + cos(pPosition.x * pPosition.y * 0.2f) - 0.2 + sin(pPosition.z * 1.1 + pPosition.y) + pPosition.x * 0.25) * 0.2;
	//density += DistancePointToBox(pPosition, float3(16, 4, 16), float3(4, 20, 9), float4(0,0,0,0));
	
	uint elements;
	uint stride;
	segmentTransformBuffer.GetDimensions(elements, stride);

	float density = 0;
	for(int i = 0; i < 16; i++) {
		if(i < elements) {
			density += DistancePointToBox(pPosition, segmentTransformBuffer[i].P, segmentTransformBuffer[i].S, segmentTransformBuffer[i].R);
		}
	}
	density += ((pPosition.y - 10) * -1 + cos(pPosition.x * pPosition.y * 0.2f) + 0.2 + sin(pPosition.z * 1.1 + pPosition.y) + pPosition.x * 0.25) * 0.01;
	
	return density;		
}

float3 GetNormal (float x, float y, float z)
{
	float3 normal = float3(0.0,0.0,0.0);
		
	// just sample texture neighbors to figure out Normal?
	float dx = SampleDensity(float3(x+1,y,z)) - SampleDensity(float3(x-1,y,z));
	float dy = SampleDensity(float3(x,y+1,z)) - SampleDensity(float3(x,y-1,z));
	float dz = SampleDensity(float3(x,y,z+1)) - SampleDensity(float3(x,y,z-1));
		
	normal = normalize(float3(0.001+dx,0.001+dy,0.001+dz));  // ?? why add 0.001? to prevent 0?
		
	return normal;		
}

float3 TriLinearInterpNormal(float3 pos)
{			
	int x = (int)(pos.x/20);  // ?? due to scaling of 0.05?
	int y = (int)(pos.y/20);
	int z = (int)(pos.z/20);
		
	//if (_Trilinear == 0)
	//	return GetNormal(x,y,z);
		
	float fx = pos.x/20.0-x;
	float fy = pos.y/20.0-y;
	float fz = pos.z/20.0-z;
		
	float3 x0 = GetNormal(x,y,z) * (1.0-fx) + GetNormal(x+1,y,z) * fx;
	float3 x1 = GetNormal(x,y,z+1) * (1.0-fx) + GetNormal(x+1,y,z+1) * fx;
		
	float3 x2 = GetNormal(x,y+1,z) * (1.0-fx) + GetNormal(x+1,y+1,z) * fx;
	float3 x3 = GetNormal(x,y+1,z+1) * (1.0-fx) + GetNormal(x+1,y+1,z+1) * fx;
		
	float3 z0 = x0 * (1.0-fz) + x1 * fz;
	float3 z1 = x2 * (1.0-fz) + x3 * fz;
		
	return z0 * (1.0-fy) + z1 * fy;
}
	
[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID, uint3 grpID : SV_GroupID, uint3 grpTID : SV_GroupThreadID)
{	
	// For each Voxel of the chunk grid:
	const float cap = 0.1;   // density threshold to determine if a vert of the cube is on a density boundary
	const float halfSize = 0.5;
	const float4 cubeVerts[8] = {
		//front face
		float4(-halfSize, -halfSize, -halfSize, 1) ,		//LB   0
		float4(-halfSize,  halfSize, -halfSize,	1) ,		//LT   1
		float4( halfSize,  halfSize, -halfSize, 1) ,		//RT   2
		float4( halfSize, -halfSize, -halfSize, 1) ,		//RB   3
		//back
		float4(-halfSize, -halfSize,  halfSize, 1),		// LB  4
		float4(-halfSize,  halfSize,  halfSize, 1),		// LT  5
		float4( halfSize,  halfSize,  halfSize, 1),		// RT  6
		float4( halfSize, -halfSize,  halfSize, 1)		// RB  7
	};		

	const int2 edge_to_verts[12] = {
		int2(0,1), //0
		int2(1,2), //1
		int2(2,3), //2
		int2(3,0), //3
		int2(4,5), //4
		int2(5,6), //5
		int2(6,7), //6
		int2(7,4), //7
		int2(4,0), //8
		int2(5,1), //9
		int2(6,2), //10
		int2(7,3) //11
	};
	const int case_to_numpolys[256] = {
		0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,2,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,
		1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,3,3,2,3,4,4,3,3,4,4,3,4,5,5,2,
		1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,4,
		2,3,3,4,3,4,2,3,3,4,4,5,4,5,3,2,3,4,4,3,4,5,3,2,4,5,5,4,5,2,4,1, 
		1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,3,3,4,3,4,4,5,3,2,4,3,4,3,5,2, 
		2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,4,3,4,4,3,4,5,5,4,4,3,5,2,5,4,2,1, 
		2,3,3,4,3,4,4,5,3,4,4,5,2,3,3,2,3,4,4,5,4,5,5,2,4,3,5,4,3,2,4,1, 
		3,4,4,5,4,5,3,4,4,5,5,2,3,4,2,1,2,3,3,2,3,4,2,1,3,2,4,1,2,1,1,0
	};
	//   256*5 = 1280 entries
	const int4 edge_connect_list[1280] = { 
		int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  1,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  8,  3, -1),  int4(9,  8,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8,  3, -1),  int4(1,  2, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  2, 10, -1),  int4(0,  2,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2,  8,  3, -1),  int4(2, 10,  8, -1), int4(10,  9,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3, 11,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0, 11,  2, -1),  int4(8, 11,  0, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  9,  0, -1),  int4(2,  3, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1, 11,  2, -1),  int4(1,  9, 11, -1),  int4(9,  8, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3, 10,  1, -1), int4(11, 10,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0, 10,  1, -1),  int4(0,  8, 10, -1),  int4(8, 11, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  9,  0, -1),  int4(3, 11,  9, -1), int4(11, 10,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  8, 10, -1), int4(10,  8, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  7,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  3,  0, -1),  int4(7,  3,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  1,  9, -1),  int4(8,  4,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  1,  9, -1),  int4(4,  7,  1, -1),  int4(7,  3,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2, 10, -1),  int4(8,  4,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  4,  7, -1),  int4(3,  0,  4, -1),  int4(1,  2, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  2, 10, -1),  int4(9,  0,  2, -1),  int4(8,  4,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2, 10,  9, -1),  int4(2,  9,  7, -1),  int4(2,  7,  3, -1),  int4(7,  9,  4, -1), int4(-1, -1, -1, -1),
		int4(8,  4,  7, -1),  int4(3, 11,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(11,  4,  7, -1), int4(11,  2,  4, -1),  int4(2,  0,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  0,  1, -1),  int4(8,  4,  7, -1),  int4(2,  3, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  7, 11, -1),  int4(9,  4, 11, -1),  int4(9, 11,  2, -1),  int4(9,  2,  1, -1), int4(-1, -1, -1, -1),
		int4(3, 10,  1, -1),  int4(3, 11, 10, -1),  int4(7,  8,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1, 11, 10, -1),  int4(1,  4, 11, -1),  int4(1,  0,  4, -1),  int4(7, 11,  4, -1), int4(-1, -1, -1, -1),
		int4(4,  7,  8, -1),  int4(9,  0, 11, -1),  int4(9, 11, 10, -1), int4(11,  0,  3, -1), int4(-1, -1, -1, -1),
		int4(4,  7, 11, -1),  int4(4, 11,  9, -1),  int4(9, 11, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  5,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  5,  4, -1),  int4(0,  8,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  5,  4, -1),  int4(1,  5,  0, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(8,  5,  4, -1),  int4(8,  3,  5, -1),  int4(3,  1,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2, 10, -1),  int4(9,  5,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  0,  8, -1),  int4(1,  2, 10, -1),  int4(4,  9,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5,  2, 10, -1),  int4(5,  4,  2, -1),  int4(4,  0,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2, 10,  5, -1),  int4(3,  2,  5, -1),  int4(3,  5,  4, -1),  int4(3,  4,  8, -1), int4(-1, -1, -1, -1),
		int4(9,  5,  4, -1),  int4(2,  3, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0, 11,  2, -1),  int4(0,  8, 11, -1),  int4(4,  9,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  5,  4, -1),  int4(0,  1,  5, -1),  int4(2,  3, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2,  1,  5, -1),  int4(2,  5,  8, -1),  int4(2,  8, 11, -1),  int4(4,  8,  5, -1), int4(-1, -1, -1, -1),
		int4(10,  3, 11, -1), int4(10,  1,  3, -1),  int4(9,  5,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  9,  5, -1),  int4(0,  8,  1, -1),  int4(8, 10,  1, -1),  int4(8, 11, 10, -1), int4(-1, -1, -1, -1),
		int4(5,  4,  0, -1),  int4(5,  0, 11, -1),  int4(5, 11, 10, -1), int4(11,  0,  3, -1), int4(-1, -1, -1, -1),
		int4(5,  4,  8, -1),  int4(5,  8, 10, -1), int4(10,  8, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  7,  8, -1),  int4(5,  7,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  3,  0, -1),  int4(9,  5,  3, -1),  int4(5,  7,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  7,  8, -1),  int4(0,  1,  7, -1),  int4(1,  5,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  5,  3, -1),  int4(3,  5,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  7,  8, -1),  int4(9,  5,  7, -1), int4(10,  1,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  1,  2, -1),  int4(9,  5,  0, -1),  int4(5,  3,  0, -1),  int4(5,  7,  3, -1), int4(-1, -1, -1, -1),
		int4(8,  0,  2, -1),  int4(8,  2,  5, -1),  int4(8,  5,  7, -1), int4(10,  5,  2, -1), int4(-1, -1, -1, -1),
		int4(2, 10,  5, -1),  int4(2,  5,  3, -1),  int4(3,  5,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(7,  9,  5, -1),  int4(7,  8,  9, -1),  int4(3, 11,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  5,  7, -1),  int4(9,  7,  2, -1),  int4(9,  2,  0, -1),  int4(2,  7, 11, -1), int4(-1, -1, -1, -1),
		int4(2,  3, 11, -1),  int4(0,  1,  8, -1),  int4(1,  7,  8, -1),  int4(1,  5,  7, -1), int4(-1, -1, -1, -1),
		int4(11,  2,  1, -1), int4(11,  1,  7, -1),  int4(7,  1,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  5,  8, -1),  int4(8,  5,  7, -1), int4(10,  1,  3, -1), int4(10,  3, 11, -1), int4(-1, -1, -1, -1),
		int4(5,  7,  0, -1),  int4(5,  0,  9, -1),  int4(7, 11,  0, -1),  int4(1,  0, 10, -1), int4(11, 10,  0, -1),
		int4(11, 10,  0, -1), int4(11,  0,  3, -1), int4(10,  5,  0, -1),  int4(8,  0,  7, -1),  int4(5,  7,  0, -1),
		int4(11, 10,  5, -1),  int4(7, 11,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  6,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8,  3, -1),  int4(5, 10,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  0,  1, -1),  int4(5, 10,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  8,  3, -1),  int4(1,  9,  8, -1),  int4(5, 10,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  6,  5, -1),  int4(2,  6,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  6,  5, -1),  int4(1,  2,  6, -1),  int4(3,  0,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  6,  5, -1),  int4(9,  0,  6, -1),  int4(0,  2,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5,  9,  8, -1),  int4(5,  8,  2, -1),  int4(5,  2,  6, -1),  int4(3,  2,  8, -1), int4(-1, -1, -1, -1),
		int4(2,  3, 11, -1), int4(10,  6,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(11,  0,  8, -1), int4(11,  2,  0, -1), int4(10,  6,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  1,  9, -1),  int4(2,  3, 11, -1),  int4(5, 10,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5, 10,  6, -1),  int4(1,  9,  2, -1),  int4(9, 11,  2, -1),  int4(9,  8, 11, -1), int4(-1, -1, -1, -1),
		int4(6,  3, 11, -1),  int4(6,  5,  3, -1),  int4(5,  1,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8, 11, -1),  int4(0, 11,  5, -1),  int4(0,  5,  1, -1),  int4(5, 11,  6, -1), int4(-1, -1, -1, -1),
		int4(3, 11,  6, -1),  int4(0,  3,  6, -1),  int4(0,  6,  5, -1),  int4(0,  5,  9, -1), int4(-1, -1, -1, -1),
		int4(6,  5,  9, -1),  int4(6,  9, 11, -1), int4(11,  9,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5, 10,  6, -1),  int4(4,  7,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  3,  0, -1),  int4(4,  7,  3, -1),  int4(6,  5, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  9,  0, -1),  int4(5, 10,  6, -1),  int4(8,  4,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  6,  5, -1),  int4(1,  9,  7, -1),  int4(1,  7,  3, -1),  int4(7,  9,  4, -1), int4(-1, -1, -1, -1),
		int4(6,  1,  2, -1),  int4(6,  5,  1, -1),  int4(4,  7,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2,  5, -1),  int4(5,  2,  6, -1),  int4(3,  0,  4, -1),  int4(3,  4,  7, -1), int4(-1, -1, -1, -1),
		int4(8,  4,  7, -1),  int4(9,  0,  5, -1),  int4(0,  6,  5, -1),  int4(0,  2,  6, -1), int4(-1, -1, -1, -1),
		int4(7,  3,  9, -1),  int4(7,  9,  4, -1),  int4(3,  2,  9, -1),  int4(5,  9,  6, -1),  int4(2,  6,  9, -1),
		int4(3, 11,  2, -1),  int4(7,  8,  4, -1), int4(10,  6,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5, 10,  6, -1),  int4(4,  7,  2, -1),  int4(4,  2,  0, -1),  int4(2,  7, 11, -1), int4(-1, -1, -1, -1),
		int4(0,  1,  9, -1),  int4(4,  7,  8, -1),  int4(2,  3, 11, -1),  int4(5, 10,  6, -1), int4(-1, -1, -1, -1),
		int4(9,  2,  1, -1),  int4(9, 11,  2, -1),  int4(9,  4, 11, -1),  int4(7, 11,  4, -1),  int4(5, 10,  6, -1),
		int4(8,  4,  7, -1),  int4(3, 11,  5, -1),  int4(3,  5,  1, -1),  int4(5, 11,  6, -1), int4(-1, -1, -1, -1),
		int4(5,  1, 11, -1),  int4(5, 11,  6, -1),  int4(1,  0, 11, -1),  int4(7, 11,  4, -1),  int4(0,  4, 11, -1),
		int4(0,  5,  9, -1),  int4(0,  6,  5, -1),  int4(0,  3,  6, -1), int4(11,  6,  3, -1),  int4(8,  4,  7, -1),
		int4(6,  5,  9, -1),  int4(6,  9, 11, -1),  int4(4,  7,  9, -1),  int4(7, 11,  9, -1), int4(-1, -1, -1, -1),
		int4(10,  4,  9, -1),  int4(6,  4, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4, 10,  6, -1),  int4(4,  9, 10, -1),  int4(0,  8,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  0,  1, -1), int4(10,  6,  0, -1),  int4(6,  4,  0, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(8,  3,  1, -1),  int4(8,  1,  6, -1),  int4(8,  6,  4, -1),  int4(6,  1, 10, -1), int4(-1, -1, -1, -1),
		int4(1,  4,  9, -1),  int4(1,  2,  4, -1),  int4(2,  6,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  0,  8, -1),  int4(1,  2,  9, -1),  int4(2,  4,  9, -1),  int4(2,  6,  4, -1), int4(-1, -1, -1, -1),
		int4(0,  2,  4, -1),  int4(4,  2,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(8,  3,  2, -1),  int4(8,  2,  4, -1),  int4(4,  2,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  4,  9, -1), int4(10,  6,  4, -1), int4(11,  2,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8,  2, -1),  int4(2,  8, 11, -1),  int4(4,  9, 10, -1),  int4(4, 10,  6, -1), int4(-1, -1, -1, -1),
		int4(3, 11,  2, -1),  int4(0,  1,  6, -1),  int4(0,  6,  4, -1),  int4(6,  1, 10, -1), int4(-1, -1, -1, -1),
		int4(6,  4,  1, -1),  int4(6,  1, 10, -1),  int4(4,  8,  1, -1),  int4(2,  1, 11, -1),  int4(8, 11,  1, -1),
		int4(9,  6,  4, -1),  int4(9,  3,  6, -1),  int4(9,  1,  3, -1), int4(11,  6,  3, -1), int4(-1, -1, -1, -1),
		int4(8, 11,  1, -1),  int4(8,  1,  0, -1), int4(11,  6,  1, -1),  int4(9,  1,  4, -1),  int4(6,  4,  1, -1),
		int4(3, 11,  6, -1),  int4(3,  6,  0, -1),  int4(0,  6,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(6,  4,  8, -1), int4(11,  6,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(7, 10,  6, -1),  int4(7,  8, 10, -1),  int4(8,  9, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  7,  3, -1),  int4(0, 10,  7, -1),  int4(0,  9, 10, -1),  int4(6,  7, 10, -1), int4(-1, -1, -1, -1),
		int4(10,  6,  7, -1),  int4(1, 10,  7, -1),  int4(1,  7,  8, -1),  int4(1,  8,  0, -1), int4(-1, -1, -1, -1),
		int4(10,  6,  7, -1), int4(10,  7,  1, -1),  int4(1,  7,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2,  6, -1),  int4(1,  6,  8, -1),  int4(1,  8,  9, -1),  int4(8,  6,  7, -1), int4(-1, -1, -1, -1),
		int4(2,  6,  9, -1),  int4(2,  9,  1, -1),  int4(6,  7,  9, -1),  int4(0,  9,  3, -1),  int4(7,  3,  9, -1),
		int4(7,  8,  0, -1),  int4(7,  0,  6, -1),  int4(6,  0,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(7,  3,  2, -1),  int4(6,  7,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2,  3, 11, -1), int4(10,  6,  8, -1), int4(10,  8,  9, -1),  int4(8,  6,  7, -1), int4(-1, -1, -1, -1),
		int4(2,  0,  7, -1),  int4(2,  7, 11, -1),  int4(0,  9,  7, -1),  int4(6,  7, 10, -1),  int4(9, 10,  7, -1),
		int4(1,  8,  0, -1),  int4(1,  7,  8, -1),  int4(1, 10,  7, -1),  int4(6,  7, 10, -1),  int4(2,  3, 11, -1),
		int4(11,  2,  1, -1), int4(11,  1,  7, -1), int4(10,  6,  1, -1),  int4(6,  7,  1, -1), int4(-1, -1, -1, -1),
		int4(8,  9,  6, -1),  int4(8,  6,  7, -1),  int4(9,  1,  6, -1), int4(11,  6,  3, -1),  int4(1,  3,  6, -1),
		int4(0,  9,  1, -1), int4(11,  6,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(7,  8,  0, -1),  int4(7,  0,  6, -1),  int4(3, 11,  0, -1), int4(11,  6,  0, -1), int4(-1, -1, -1, -1),
		int4(7, 11,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(7,  6, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  0,  8, -1), int4(11,  7,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  1,  9, -1), int4(11,  7,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(8,  1,  9, -1),  int4(8,  3,  1, -1), int4(11,  7,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  1,  2, -1),  int4(6, 11,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2, 10, -1),  int4(3,  0,  8, -1),  int4(6, 11,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2,  9,  0, -1),  int4(2, 10,  9, -1),  int4(6, 11,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(6, 11,  7, -1),  int4(2, 10,  3, -1), int4(10,  8,  3, -1), int4(10,  9,  8, -1), int4(-1, -1, -1, -1),
		int4(7,  2,  3, -1),  int4(6,  2,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(7,  0,  8, -1),  int4(7,  6,  0, -1),  int4(6,  2,  0, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2,  7,  6, -1),  int4(2,  3,  7, -1),  int4(0,  1,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  6,  2, -1),  int4(1,  8,  6, -1),  int4(1,  9,  8, -1),  int4(8,  7,  6, -1), int4(-1, -1, -1, -1),
		int4(10,  7,  6, -1), int4(10,  1,  7, -1),  int4(1,  3,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  7,  6, -1),  int4(1,  7, 10, -1),  int4(1,  8,  7, -1),  int4(1,  0,  8, -1), int4(-1, -1, -1, -1),
		int4(0,  3,  7, -1),  int4(0,  7, 10, -1),  int4(0, 10,  9, -1),  int4(6, 10,  7, -1), int4(-1, -1, -1, -1),
		int4(7,  6, 10, -1),  int4(7, 10,  8, -1),  int4(8, 10,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(6,  8,  4, -1), int4(11,  8,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  6, 11, -1),  int4(3,  0,  6, -1),  int4(0,  4,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(8,  6, 11, -1),  int4(8,  4,  6, -1),  int4(9,  0,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  4,  6, -1),  int4(9,  6,  3, -1),  int4(9,  3,  1, -1), int4(11,  3,  6, -1), int4(-1, -1, -1, -1),
		int4(6,  8,  4, -1),  int4(6, 11,  8, -1),  int4(2, 10,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2, 10, -1),  int4(3,  0, 11, -1),  int4(0,  6, 11, -1),  int4(0,  4,  6, -1), int4(-1, -1, -1, -1),
		int4(4, 11,  8, -1),  int4(4,  6, 11, -1),  int4(0,  2,  9, -1),  int4(2, 10,  9, -1), int4(-1, -1, -1, -1),
		int4(10,  9,  3, -1), int4(10,  3,  2, -1),  int4(9,  4,  3, -1), int4(11,  3,  6, -1),  int4(4,  6,  3, -1),
		int4(8,  2,  3, -1),  int4(8,  4,  2, -1),  int4(4,  6,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  4,  2, -1),  int4(4,  6,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  9,  0, -1),  int4(2,  3,  4, -1),  int4(2,  4,  6, -1),  int4(4,  3,  8, -1), int4(-1, -1, -1, -1),
		int4(1,  9,  4, -1),  int4(1,  4,  2, -1),  int4(2,  4,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(8,  1,  3, -1),  int4(8,  6,  1, -1),  int4(8,  4,  6, -1),  int4(6, 10,  1, -1), int4(-1, -1, -1, -1),
		int4(10,  1,  0, -1), int4(10,  0,  6, -1),  int4(6,  0,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  6,  3, -1),  int4(4,  3,  8, -1),  int4(6, 10,  3, -1),  int4(0,  3,  9, -1), int4(10,  9,  3, -1),
		int4(10,  9,  4, -1),  int4(6, 10,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  9,  5, -1),  int4(7,  6, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8,  3, -1),  int4(4,  9,  5, -1), int4(11,  7,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5,  0,  1, -1),  int4(5,  4,  0, -1),  int4(7,  6, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(11,  7,  6, -1),  int4(8,  3,  4, -1),  int4(3,  5,  4, -1),  int4(3,  1,  5, -1), int4(-1, -1, -1, -1),
		int4(9,  5,  4, -1), int4(10,  1,  2, -1),  int4(7,  6, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(6, 11,  7, -1),  int4(1,  2, 10, -1),  int4(0,  8,  3, -1),  int4(4,  9,  5, -1), int4(-1, -1, -1, -1),
		int4(7,  6, 11, -1),  int4(5,  4, 10, -1),  int4(4,  2, 10, -1),  int4(4,  0,  2, -1), int4(-1, -1, -1, -1),
		int4(3,  4,  8, -1),  int4(3,  5,  4, -1),  int4(3,  2,  5, -1), int4(10,  5,  2, -1), int4(11,  7,  6, -1),
		int4(7,  2,  3, -1),  int4(7,  6,  2, -1),  int4(5,  4,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  5,  4, -1),  int4(0,  8,  6, -1),  int4(0,  6,  2, -1),  int4(6,  8,  7, -1), int4(-1, -1, -1, -1),
		int4(3,  6,  2, -1),  int4(3,  7,  6, -1),  int4(1,  5,  0, -1),  int4(5,  4,  0, -1), int4(-1, -1, -1, -1),
		int4(6,  2,  8, -1),  int4(6,  8,  7, -1),  int4(2,  1,  8, -1),  int4(4,  8,  5, -1),  int4(1,  5,  8, -1),
		int4(9,  5,  4, -1), int4(10,  1,  6, -1),  int4(1,  7,  6, -1),  int4(1,  3,  7, -1), int4(-1, -1, -1, -1),
		int4(1,  6, 10, -1),  int4(1,  7,  6, -1),  int4(1,  0,  7, -1),  int4(8,  7,  0, -1),  int4(9,  5,  4, -1),
		int4(4,  0, 10, -1),  int4(4, 10,  5, -1),  int4(0,  3, 10, -1),  int4(6, 10,  7, -1),  int4(3,  7, 10, -1),
		int4(7,  6, 10, -1),  int4(7, 10,  8, -1),  int4(5,  4, 10, -1),  int4(4,  8, 10, -1), int4(-1, -1, -1, -1),
		int4(6,  9,  5, -1),  int4(6, 11,  9, -1), int4(11,  8,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  6, 11, -1),  int4(0,  6,  3, -1),  int4(0,  5,  6, -1),  int4(0,  9,  5, -1), int4(-1, -1, -1, -1),
		int4(0, 11,  8, -1),  int4(0,  5, 11, -1),  int4(0,  1,  5, -1),  int4(5,  6, 11, -1), int4(-1, -1, -1, -1),
		int4(6, 11,  3, -1),  int4(6,  3,  5, -1),  int4(5,  3,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2, 10, -1),  int4(9,  5, 11, -1),  int4(9, 11,  8, -1), int4(11,  5,  6, -1), int4(-1, -1, -1, -1),
		int4(0, 11,  3, -1),  int4(0,  6, 11, -1),  int4(0,  9,  6, -1),  int4(5,  6,  9, -1),  int4(1,  2, 10, -1),
		int4(11,  8,  5, -1), int4(11,  5,  6, -1),  int4(8,  0,  5, -1), int4(10,  5,  2, -1),  int4(0,  2,  5, -1),
		int4(6, 11,  3, -1),  int4(6,  3,  5, -1),  int4(2, 10,  3, -1), int4(10,  5,  3, -1), int4(-1, -1, -1, -1),
		int4(5,  8,  9, -1),  int4(5,  2,  8, -1),  int4(5,  6,  2, -1),  int4(3,  8,  2, -1), int4(-1, -1, -1, -1),
		int4(9,  5,  6, -1),  int4(9,  6,  0, -1),  int4(0,  6,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  5,  8, -1),  int4(1,  8,  0, -1),  int4(5,  6,  8, -1),  int4(3,  8,  2, -1),  int4(6,  2,  8, -1),
		int4(1,  5,  6, -1),  int4(2,  1,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  3,  6, -1),  int4(1,  6, 10, -1),  int4(3,  8,  6, -1),  int4(5,  6,  9, -1),  int4(8,  9,  6, -1),
		int4(10,  1,  0, -1), int4(10,  0,  6, -1),  int4(9,  5,  0, -1),  int4(5,  6,  0, -1), int4(-1, -1, -1, -1),
		int4(0,  3,  8, -1),  int4(5,  6, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  5,  6, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(11,  5, 10, -1),  int4(7,  5, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(11,  5, 10, -1), int4(11,  7,  5, -1),  int4(8,  3,  0, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5, 11,  7, -1),  int4(5, 10, 11, -1),  int4(1,  9,  0, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(10,  7,  5, -1), int4(10, 11,  7, -1),  int4(9,  8,  1, -1),  int4(8,  3,  1, -1), int4(-1, -1, -1, -1),
		int4(11,  1,  2, -1), int4(11,  7,  1, -1),  int4(7,  5,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8,  3, -1),  int4(1,  2,  7, -1),  int4(1,  7,  5, -1),  int4(7,  2, 11, -1), int4(-1, -1, -1, -1),
		int4(9,  7,  5, -1),  int4(9,  2,  7, -1),  int4(9,  0,  2, -1),  int4(2, 11,  7, -1), int4(-1, -1, -1, -1),
		int4(7,  5,  2, -1),  int4(7,  2, 11, -1),  int4(5,  9,  2, -1),  int4(3,  2,  8, -1),  int4(9,  8,  2, -1),
		int4(2,  5, 10, -1),  int4(2,  3,  5, -1),  int4(3,  7,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(8,  2,  0, -1),  int4(8,  5,  2, -1),  int4(8,  7,  5, -1), int4(10,  2,  5, -1), int4(-1, -1, -1, -1),
		int4(9,  0,  1, -1),  int4(5, 10,  3, -1),  int4(5,  3,  7, -1),  int4(3, 10,  2, -1), int4(-1, -1, -1, -1),
		int4(9,  8,  2, -1),  int4(9,  2,  1, -1),  int4(8,  7,  2, -1), int4(10,  2,  5, -1),  int4(7,  5,  2, -1),
		int4(1,  3,  5, -1),  int4(3,  7,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8,  7, -1),  int4(0,  7,  1, -1),  int4(1,  7,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  0,  3, -1),  int4(9,  3,  5, -1),  int4(5,  3,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9,  8,  7, -1),  int4(5,  9,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5,  8,  4, -1),  int4(5, 10,  8, -1), int4(10, 11,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(5,  0,  4, -1),  int4(5, 11,  0, -1),  int4(5, 10, 11, -1), int4(11,  3,  0, -1), int4(-1, -1, -1, -1),
		int4(0,  1,  9, -1),  int4(8,  4, 10, -1),  int4(8, 10, 11, -1), int4(10,  4,  5, -1), int4(-1, -1, -1, -1),
		int4(10, 11,  4, -1), int4(10,  4,  5, -1), int4(11,  3,  4, -1),  int4(9,  4,  1, -1),  int4(3,  1,  4, -1),
		int4(2,  5,  1, -1),  int4(2,  8,  5, -1),  int4(2, 11,  8, -1),  int4(4,  5,  8, -1), int4(-1, -1, -1, -1),
		int4(0,  4, 11, -1),  int4(0, 11,  3, -1),  int4(4,  5, 11, -1),  int4(2, 11,  1, -1),  int4(5,  1, 11, -1),
		int4(0,  2,  5, -1),  int4(0,  5,  9, -1),  int4(2, 11,  5, -1),  int4(4,  5,  8, -1), int4(11,  8,  5, -1),
		int4(9,  4,  5, -1),  int4(2, 11,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2,  5, 10, -1),  int4(3,  5,  2, -1),  int4(3,  4,  5, -1),  int4(3,  8,  4, -1), int4(-1, -1, -1, -1),
		int4(5, 10,  2, -1),  int4(5,  2,  4, -1),  int4(4,  2,  0, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3, 10,  2, -1),  int4(3,  5, 10, -1),  int4(3,  8,  5, -1),  int4(4,  5,  8, -1),  int4(0,  1,  9, -1),
		int4(5, 10,  2, -1),  int4(5,  2,  4, -1),  int4(1,  9,  2, -1),  int4(9,  4,  2, -1), int4(-1, -1, -1, -1),
		int4(8,  4,  5, -1),  int4(8,  5,  3, -1),  int4(3,  5,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  4,  5, -1),  int4(1,  0,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(8,  4,  5, -1),  int4(8,  5,  3, -1),  int4(9,  0,  5, -1),  int4(0,  3,  5, -1), int4(-1, -1, -1, -1),
		int4(9,  4,  5, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4, 11,  7, -1),  int4(4,  9, 11, -1),  int4(9, 10, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  8,  3, -1),  int4(4,  9,  7, -1),  int4(9, 11,  7, -1),  int4(9, 10, 11, -1), int4(-1, -1, -1, -1),
		int4(1, 10, 11, -1),  int4(1, 11,  4, -1),  int4(1,  4,  0, -1),  int4(7,  4, 11, -1), int4(-1, -1, -1, -1),
		int4(3,  1,  4, -1),  int4(3,  4,  8, -1),  int4(1, 10,  4, -1),  int4(7,  4, 11, -1), int4(10, 11,  4, -1),
		int4(4, 11,  7, -1),  int4(9, 11,  4, -1),  int4(9,  2, 11, -1),  int4(9,  1,  2, -1), int4(-1, -1, -1, -1),
		int4(9,  7,  4, -1),  int4(9, 11,  7, -1),  int4(9,  1, 11, -1),  int4(2, 11,  1, -1),  int4(0,  8,  3, -1),
		int4(11,  7,  4, -1), int4(11,  4,  2, -1),  int4(2,  4,  0, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(11,  7,  4, -1), int4(11,  4,  2, -1),  int4(8,  3,  4, -1),  int4(3,  2,  4, -1), int4(-1, -1, -1, -1),
		int4(2,  9, 10, -1),  int4(2,  7,  9, -1),  int4(2,  3,  7, -1),  int4(7,  4,  9, -1), int4(-1, -1, -1, -1),
		int4(9, 10,  7, -1),  int4(9,  7,  4, -1), int4(10,  2,  7, -1),  int4(8,  7,  0, -1),  int4(2,  0,  7, -1),
		int4(3,  7, 10, -1),  int4(3, 10,  2, -1),  int4(7,  4, 10, -1),  int4(1, 10,  0, -1),  int4(4,  0, 10, -1),
		int4(1, 10,  2, -1),  int4(8,  7,  4, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  9,  1, -1),  int4(4,  1,  7, -1),  int4(7,  1,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  9,  1, -1),  int4(4,  1,  7, -1),  int4(0,  8,  1, -1),  int4(8,  7,  1, -1), int4(-1, -1, -1, -1),
		int4(4,  0,  3, -1),  int4(7,  4,  3, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(4,  8,  7, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9, 10,  8, -1), int4(10, 11,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  0,  9, -1),  int4(3,  9, 11, -1), int4(11,  9, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  1, 10, -1),  int4(0, 10,  8, -1),  int4(8, 10, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  1, 10, -1), int4(11,  3, 10, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  2, 11, -1),  int4(1, 11,  9, -1),  int4(9, 11,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  0,  9, -1),  int4(3,  9, 11, -1),  int4(1,  2,  9, -1),  int4(2, 11,  9, -1), int4(-1, -1, -1, -1),
		int4(0,  2, 11, -1),  int4(8,  0, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(3,  2, 11, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2,  3,  8, -1),  int4(2,  8, 10, -1), int4(10,  8,  9, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(9, 10,  2, -1),  int4(0,  9,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(2,  3,  8, -1),  int4(2,  8, 10, -1),  int4(0,  1,  8, -1),  int4(1, 10,  8, -1), int4(-1, -1, -1, -1),
		int4(1, 10,  2, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(1,  3,  8, -1),  int4(9,  1,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  9,  1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(0,  3,  8, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1),
		int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1), int4(-1, -1, -1, -1)
	};	
			
	Poly NewPoly;
		
	int Index;
		
	// grpID, grpTID	
				
	//float3 p = grpID * 8 + float3(grpTID.x, grpTID.y, grpTID.z);
	float3 p = id;
	p.x += _GlobalOffsetX;
	p.y += _GlobalOffsetY;
	p.z += _GlobalOffsetZ;
	
	float weights[8];				
	weights[0] = SampleDensity(p + cubeVerts[0]);
	weights[1] = SampleDensity(p + cubeVerts[1]);
	weights[2] = SampleDensity(p + cubeVerts[2]);
	weights[3] = SampleDensity(p + cubeVerts[3]);
	weights[4] = SampleDensity(p + cubeVerts[4]);
	weights[5] = SampleDensity(p + cubeVerts[5]);
	weights[6] = SampleDensity(p + cubeVerts[6]);
	weights[7] = SampleDensity(p + cubeVerts[7]);			

	int marchingCase = 
	(weights[7] > cap) * 128 + 
	(weights[6] > cap) * 64 +
	(weights[5] > cap) * 32 +
	(weights[4] > cap) * 16 +
	(weights[3] > cap) * 8 +
	(weights[2] > cap) * 4 +
	(weights[1] > cap) * 2 +
	(weights[0] > cap) * 1;
			
	int numpolys = case_to_numpolys[marchingCase];	
	InterlockedAdd(numPolyBuffer[0],numpolys);	
	
	if(_CalcNumPolys < 0.5) {
		for( int i = 0; i < 5; i++ )
		{		
			if(i < numpolys)
			{
				int4 polyEdges = edge_connect_list[marchingCase * 5 + i];
					
				int va = edge_to_verts[polyEdges.x].x;
				int vb = edge_to_verts[polyEdges.x].y;
				float amount = (cap - weights[va]) / (weights[vb] - weights[va]);
				NewPoly.A = lerp( p + cubeVerts[va],  p + cubeVerts[vb], amount);
				NewPoly.NA = GetNormal(NewPoly.A.x, NewPoly.A.y, NewPoly.A.z);										
					
				va = edge_to_verts[polyEdges.y].x;
				vb = edge_to_verts[polyEdges.y].y;
				amount = (cap - weights[va]) / (weights[vb] - weights[va]);
				NewPoly.B = lerp( p + cubeVerts[va],  p + cubeVerts[vb], amount);
				NewPoly.NB = GetNormal(NewPoly.B.x, NewPoly.B.y, NewPoly.B.z);

				va = edge_to_verts[polyEdges.z].x;
				vb = edge_to_verts[polyEdges.z].y;
				amount = (cap - weights[va]) / (weights[vb] - weights[va]);
				NewPoly.C = lerp( p + cubeVerts[va],  p + cubeVerts[vb], amount);
				NewPoly.NC = GetNormal(NewPoly.C.x, NewPoly.C.y, NewPoly.C.z);

				//Increase buffer index counter and get current one
				InterlockedAdd(index_counter,1,Index);
					
				//Append new poly to buffer
				buffer[Index] = NewPoly;
					
			}
		}
	}		
}

