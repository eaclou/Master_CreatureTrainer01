// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define thread_group_size_x 16
#define thread_group_size_y 16
#define thread_group_size_z 1

float speed = 1;
int wobble = 0;
float3 wind = float3(0,0,0);
float spacing = 5;

struct positionStruct {
	float3 pos;
};

struct startYStruct {
	float offset;
};

struct constStruct {
	float t;
};

struct posMod {
	float2 mod;
};

RWStructuredBuffer<posMod> modBuffer;
RWStructuredBuffer<constStruct> constBuffer;
RWStructuredBuffer<startYStruct> startPointBuffer;
RWStructuredBuffer<positionStruct> outputBuffer;

[numthreads(thread_group_size_x, thread_group_size_y, thread_group_size_z)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int idx = id.x + id.y * thread_group_size_x * 32;

	float3 center = float3(-thread_group_size_x * 15, 0, -thread_group_size_y * 15);
	float3 pos = (float3(id.x, id.z + (startPointBuffer[idx].offset), id.y) + center) * spacing;

	pos.y = (lerp((spacing * 2) * 32, 0, (pos.y + (constBuffer[0].t * (modBuffer[idx].mod.x * speed))) % 1)) * spacing;

	if(wobble) {
		pos.x += (cos(constBuffer[0].t * (modBuffer[idx].mod.x * 100))) * spacing;
		pos.y += (sin(constBuffer[0].t * (modBuffer[idx].mod.y * 100))) * spacing;	
	}

	wind.y = 0;
	pos += (wind * constBuffer[0].t * 100);

	outputBuffer[idx].pos = pos;
}
